(define-public (mint-nft (token-id uint) (nft-asset-contract principal) (image-uri (string-utf8 256)))
  (if (none? (map-get nft-owners token-id))
    (begin
      (map-set nft-owners token-id (tx-sender))
      (map-set nft-images token-id image-uri)
      (ok true)
    )
    (err "Token ID already exists")
  )
)

(define-public (transfer-nft (token-id uint) (to-principal principal))
  (match (map-get nft-owners token-id)
    (some (owner-principal)
      (if (is-eq owner-principal tx-sender)
        (begin
          (map-set nft-owners token-id to-principal)
          (ok true)
        )
        (err "You do not own this NFT")
      )
    )
    (none (err "NFT not found"))
  )
)

(define-public (set-nft-status (token-id uint) (status uint))
  (match (map-get nft-owners token-id)
    (some (owner-principal)
      (if (is-eq owner-principal tx-sender)
        (begin
          (map-set nft-statuses token-id status)
          (ok true)
        )
        (err "You do not own this NFT")
      )
    )
    (none (err "NFT not found"))
  )
)

(define-public (get-nft-status (token-id uint))
  (match (map-get nft-statuses token-id)
    (some (status) status)
    (none 0) ; Default status if not found
  )
)

(define-public (add-nft-to-collection (collection-id uint) (token-id uint))
  (if (is-none (map-get nft-collections collection-id))
    (map-set nft-collections collection-id (list token-id))
    (let ((collection-tokens (unwrap (map-get nft-collections collection-id))))
      (if (not (list-contains? collection-tokens token-id))
        (begin
          (map-set nft-collections collection-id (append collection-tokens (list token-id)))
          (ok true)
        )
        (err "NFT already exists in the collection")
      )
    )
  )
)

(define-public (remove-nft-from-collection (collection-id uint) (token-id uint))
  (if (is-none (map-get nft-collections collection-id))
    (err "Collection not found")
    (let ((collection-tokens (unwrap (map-get nft-collections collection-id))))
      (if (list-contains? collection-tokens token-id)
        (begin
          (map-set nft-collections collection-id (filter (fn (x) (!= x token-id)) collection-tokens))
          (ok true)
        )
        (err "NFT not found in the collection")
      )
    )
  )
)

(define-read-only (get-nft-collection (collection-id uint))
  (unwrap (map-get nft-collections collection-id))
)

(define-public (update-nft-value (token-id uint) (new-value uint))
  (match (map-get nft-owners token-id)
    (some (owner-principal)
      (if (is-eq owner-principal tx-sender)
        (begin
          (map-set nft-values token-id new-value)
          (ok true)
        )
        (err "You do not own this NFT")
      )
    )
    (none (err "NFT not found"))
  )
)

(define-public (get-nft-value (token-id uint))
  (match (map-get nft-values token-id)
    (some (value) value)
    (none 0) ; Default value if not found
  )
)

(define-public (get-nft-image-uri (token-id uint))
  (match (map-get nft-images token-id)
    (some (image-uri) image-uri)
    (none "") ; Default image URI if not found
  )
)
